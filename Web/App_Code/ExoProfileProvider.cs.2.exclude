using System;
using System.Data;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Web.Profile;
using Exo.Exoget.Model.User;
using System.Text;
using Exo.Extensions;
using System.Threading;
using MySql.Data.MySqlClient;

namespace Exo.Web
{
    public class ExoProfileProvider : ProfileProvider
    {
        public ExoProfileProvider()
        {
        }

        public override int DeleteInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate)
        {
            throw new Exception("The method or operation is not implemented.");
        }

        public override int DeleteProfiles(string[] usernames)
        {
            throw new Exception("The method or operation is not implemented.");
        }

        public override int DeleteProfiles(ProfileInfoCollection profiles)
        {
            throw new Exception("The method or operation is not implemented.");
        }

        public override ProfileInfoCollection FindInactiveProfilesByUserName(ProfileAuthenticationOption authenticationOption, string usernameToMatch, DateTime userInactiveSinceDate, int pageIndex, int pageSize, out int totalRecords)
        {
            throw new Exception("The method or operation is not implemented.");
        }

        public override ProfileInfoCollection FindProfilesByUserName(ProfileAuthenticationOption authenticationOption, string usernameToMatch, int pageIndex, int pageSize, out int totalRecords)
        {
            throw new Exception("The method or operation is not implemented.");
        }

        public override ProfileInfoCollection GetAllInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate, int pageIndex, int pageSize, out int totalRecords)
        {
            throw new Exception("The method or operation is not implemented.");
        }

        public override ProfileInfoCollection GetAllProfiles(ProfileAuthenticationOption authenticationOption, int pageIndex, int pageSize, out int totalRecords)
        {
            throw new Exception("The method or operation is not implemented.");
        }

        public override int GetNumberOfInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate)
        {
            throw new Exception("The method or operation is not implemented.");
        }

        public override string ApplicationName
        {
            get
            {
                throw new Exception("The method or operation is not implemented.");
            }
            set
            {
                throw new Exception("The method or operation is not implemented.");
            }
        }

        public override SettingsPropertyValueCollection GetPropertyValues(SettingsContext context, SettingsPropertyCollection collection)
        {
            SettingsPropertyValueCollection propertyValues = new SettingsPropertyValueCollection();

            if (!String.IsNullOrEmpty(HttpContext.Current.Profile.UserName))
            {
                StringBuilder columns = new StringBuilder();

                foreach (SettingsProperty p in collection)
                {
                    propertyValues.Add(new SettingsPropertyValue(p));

                    columns.Append(p.Name);
                    columns.Append(',');
                }

                columns = columns.Remove(columns.Length - 1, 1);

                string sql;
                long anonymousUserId = 0;

                if (HttpContext.Current.Profile.IsAnonymous)
                {
                    anonymousUserId = BitConverter.ToInt64(new Guid(HttpContext.Current.Profile.UserName).ToByteArray(), 0);
                    sql = "SELECT " + columns + " FROM users WHERE anonymousId=" + anonymousUserId;
                }
                else
                    sql = "SELECT " + columns + " FROM users WHERE id=" + ((UserIdentity)Thread.CurrentPrincipal.Identity).Id;

                using (MySqlConnection conn = new MySqlConnection(ConfigurationManager.ConnectionStrings["exoget"].ConnectionString))
                {
                    conn.Open();

                    using (MySqlCommand command = new MySqlCommand(sql, conn))
                    using (MySqlDataReader reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            for (int i = 0; i < reader.FieldCount; i++)
                            {
                                propertyValues[reader.GetName(i)].PropertyValue = reader[i];
                                propertyValues[reader.GetName(i)].IsDirty = false;
                            }
                        }
                        else
                        {
                            command.Dispose();
                            reader.Dispose();

                            using (MySqlCommand command2 = new MySqlCommand("INSERT IGNORE INTO users (anonymousId) VALUES (" + anonymousUserId + ")", conn))
                            {
                                command2.ExecuteNonQuery();
                            }
                        }
                    }
                }
            }

            return propertyValues;
        }

        public override void SetPropertyValues(SettingsContext context, SettingsPropertyValueCollection collection)
        {
            StringBuilder sql = null;

            foreach (SettingsPropertyValue p in collection)
            {
                if (p.IsDirty)
                {
                    if (sql == null)
                        sql = new StringBuilder();

                    if (sql.Length == 0)
                        sql.Append("UPDATE users SET ");

                    else
                        sql.Append(',');

                    sql.AppendFormat("{0}={1}", p.Name, p.PropertyValue.SqlEscape());
                }
            }

            if (sql != null)
            {
                if (HttpContext.Current.Profile.IsAnonymous)
                {
                    long anonymousUserId = BitConverter.ToInt64(new Guid(HttpContext.Current.Profile.UserName).ToByteArray(), 0);
                    sql.AppendFormat(" WHERE anonymousId={0};", anonymousUserId);
                }
                else
                {
                    sql.AppendFormat(" WHERE id={0};", ((UserIdentity)Thread.CurrentPrincipal.Identity).Id);
                }

                using (MySqlConnection conn = new MySqlConnection(ConfigurationManager.ConnectionStrings["exoget"].ConnectionString))
                {
                    conn.Open();

                    using (MySqlCommand command = new MySqlCommand(sql.ToString(), conn))
                    {
                        command.ExecuteNonQuery();
                    }
                }
            }
        }
    }
}